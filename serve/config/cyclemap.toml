[webserver]
port = ":8080"

[cache]
max_zoom="16"
type="file"             # cache type
basepath="/cache"       # cache specific config

# register data providers
[[providers]]
name = "world"            # provider name is referenced from map layers
type = "postgis"        # the type of data provider. currently only supports postgis
host = "postgis11"        # postgis database host
port = 5432             # postgis database port
database = "world"      # postgis database name
user = "postgres"       # postgis database user
password = ""           # postgis database password
srid = 3857             # The default srid for this provider. If not provided it will be WebMercator (3857)

    [[providers.layers]]
    name = "water"
    sql= """
    select gid, ST_AsBinary(geometry) as geom from public.water_polygons_z2 WHERE 1 >= !ZOOM! AND (geometry && !BBOX!) 
    union all
    select gid, ST_AsBinary(geometry) as geom from public.water_polygons_z3 WHERE 1 < !ZOOM! AND 2 >= !ZOOM! AND (geometry && !BBOX!) 
    union all
    select gid, ST_AsBinary(geometry) as geom from public.water_polygons_z4 WHERE 2 < !ZOOM! AND 3 >= !ZOOM! AND (geometry && !BBOX!) 
    union all
    select gid, ST_AsBinary(geometry) as geom from public.water_polygons_z5 WHERE 3 < !ZOOM! AND 4 >= !ZOOM! AND (geometry && !BBOX!) 
    union all
    select gid, ST_AsBinary(geometry) as geom from public.water_polygons_z6 WHERE 4 < !ZOOM! AND 5 >= !ZOOM! AND (geometry && !BBOX!) 
    union all
    select gid, ST_AsBinary(geometry) as geom from public.water_polygons_z7 WHERE 5 < !ZOOM! AND 6 >= !ZOOM! AND (geometry && !BBOX!) 
    union all
    select gid, ST_AsBinary(geometry) as geom from public.water_polygons_z8 WHERE 6 < !ZOOM! AND 7 >= !ZOOM! AND (geometry && !BBOX!) 
    union all
    select gid, ST_AsBinary(geometry) as geom from public.simplified_water_polygons WHERE 7 < !ZOOM! AND 8 >= !ZOOM! AND (geometry && !BBOX!) 
    union all
    select gid, ST_AsBinary(geometry) as geom from public.water_polygons WHERE 8 < !ZOOM! AND (geometry && !BBOX!) 
    """

    [[providers.layers]]
    name = "admin"
    sql= """
    select osm_id as gid, ST_AsBinary(geometry) as geom, admin_level, maritime from public.osmborder_gen4 WHERE 6 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, admin_level, maritime from public.osmborder_gen6 WHERE 6 <= !ZOOM! AND 8 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, admin_level, maritime from public.osmborder_gen8 WHERE 8 <= !ZOOM! AND 10 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, admin_level, maritime from public.osmborder_gen10 WHERE 10 <= !ZOOM! AND 12 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, admin_level, maritime from public.osmborder_gen12 WHERE 12 <= !ZOOM! AND 14 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, admin_level, maritime from public.osmborder_gen14 WHERE 14 <= !ZOOM! AND (geometry && !BBOX!) 
    """

[[maps]]
name = "global"

    [[maps.layers]]
    provider_layer = "world.water"
    dont_simplify = true    

    [[maps.layers]]
    provider_layer = "world.admin"


[[providers]]
name = "cluster"        # provider name is referenced from map layers
type = "postgis"        # the type of data provider. currently only supports postgis
host = "postgis11"      # postgis database host
port = 5432             # postgis database port
database = "slice"      # postgis database name
user = "postgres"       # postgis database user
password = ""           # postgis database password
srid = 3857             # The default srid for this provider. If not provided it will be WebMercator (3857)

    [[providers.layers]]
    name = "poi"
    # https://stackoverflow.com/questions/164319/is-there-any-difference-between-group-by-and-distinct
    sql= """
        SELECT (array_agg(osm_id))[1] as gid,
            ST_AsBinary(ST_Centroid(ST_Union(geom))) as geom,
            count(osm_id) AS count,
            class, 
            subclass,
            (array_remove(array_agg(name), ''))[1] as name,
            (array_agg(ele))[1] as ele, 
            (array_agg(access))[1] AS access,
            (array_agg(religion))[1] AS religion    
        FROM 
            (SELECT
                osm_id,
                name,
                class,
                subclass,
                ele,
                access,
                religion,
                ST_ClusterDBSCAN(geometry, 300, 1) OVER () AS cluster_id,
                geometry as geom
            FROM import.poi
            WHERE 11 <= !ZOOM! AND 12 > !ZOOM! AND (geometry && !BBOX!)
            ) cluster
        GROUP BY class, subclass, cluster_id
    UNION ALL
        SELECT (array_agg(osm_id))[1] as gid,
            ST_AsBinary(ST_Centroid(ST_Union(geom))) as geom,
            count(osm_id) AS count,
            class, 
            subclass,
            (array_remove(array_agg(name), ''))[1] as name,
            (array_agg(ele))[1] as ele, 
            (array_agg(access))[1] AS access,
            (array_agg(religion))[1] AS religion    
        FROM 
            (SELECT
                osm_id,
                name,
                class,
                subclass,
                ele,
                access,
                religion,
                ST_ClusterDBSCAN(geometry, 160, 1) OVER () AS cluster_id,
                geometry as geom
            FROM import.poi
            WHERE 12 <= !ZOOM! AND 13 > !ZOOM! AND (geometry && !BBOX!)
            ) cluster
        GROUP BY class, subclass, cluster_id
    UNION ALL
        SELECT (array_agg(osm_id))[1] as gid,
            ST_AsBinary(ST_Centroid(ST_Union(geom))) as geom,
            count(osm_id) AS count,
            class, 
            subclass,
            (array_remove(array_agg(name), ''))[1] as name,
            (array_agg(ele))[1] as ele, 
            (array_agg(access))[1] AS access,
            (array_agg(religion))[1] AS religion    
        FROM 
            (SELECT
                osm_id,
                name,
                class,
                subclass,
                ele,
                access,
                religion,
                ST_ClusterDBSCAN(geometry, 160, 1) OVER () AS cluster_id,
                geometry as geom
            FROM import.poi
            WHERE 13 <= !ZOOM! AND 14 > !ZOOM! AND (geometry && !BBOX!)
            ) cluster
        GROUP BY class, subclass, cluster_id
    UNION ALL
        SELECT (array_agg(osm_id))[1] as gid,
            ST_AsBinary(ST_Centroid(ST_Union(geom))) as geom,
            count(osm_id) AS count,
            class, 
            subclass,
            (array_remove(array_agg(name), ''))[1] as name,
            (array_agg(ele))[1] as ele, 
            (array_agg(access))[1] AS access,
            (array_agg(religion))[1] AS religion    
        FROM 
            (SELECT
                osm_id,
                name,
                class,
                subclass,
                ele,
                access,
                religion,
                ST_ClusterDBSCAN(geometry, 120, 1) OVER () AS cluster_id,
                geometry as geom
            FROM import.poi
            WHERE 14 <= !ZOOM! AND 15 > !ZOOM! AND (geometry && !BBOX!)
            ) cluster
        GROUP BY class, subclass, cluster_id
    UNION ALL
        SELECT (array_agg(osm_id))[1] as gid,
            ST_AsBinary(ST_Centroid(ST_Union(geom))) as geom,
            count(osm_id) AS count,
            class, 
            subclass,
            (array_remove(array_agg(name), ''))[1] as name,
            (array_agg(ele))[1] as ele, 
            (array_agg(access))[1] AS access,
            (array_agg(religion))[1] AS religion    
        FROM 
            (SELECT
                osm_id,
                name,
                class,
                subclass,
                ele,
                access,
                religion,
                ST_ClusterDBSCAN(geometry, 80, 1) OVER () AS cluster_id,
                geometry as geom
            FROM import.poi
            WHERE 15 <= !ZOOM! AND 16 > !ZOOM! AND (geometry && !BBOX!)
            ) cluster
        GROUP BY class, subclass, cluster_id
    UNION ALL
        SELECT (array_agg(osm_id))[1] as gid,
            ST_AsBinary(ST_Centroid(ST_Union(geom))) as geom,
            count(osm_id) AS count,
            class, 
            subclass,
            (array_remove(array_agg(name), ''))[1] as name,
            (array_agg(ele))[1] as ele, 
            (array_agg(access))[1] AS access,
            (array_agg(religion))[1] AS religion    
        FROM 
            (SELECT
                osm_id,
                name,
                class,
                subclass,
                ele,
                access,
                religion,
                ST_ClusterDBSCAN(geometry, 40, 1) OVER () AS cluster_id,
                geometry as geom
            FROM import.poi
            WHERE 16 <= !ZOOM! AND 17 > !ZOOM! AND (geometry && !BBOX!)
            ) cluster
        GROUP BY class, subclass, cluster_id
    UNION ALL
        SELECT (array_agg(osm_id))[1] as gid,
            ST_AsBinary(ST_Centroid(ST_Union(geom))) as geom,
            count(osm_id) AS count,
            class, 
            subclass,
            (array_remove(array_agg(name), ''))[1] as name,
            (array_agg(ele))[1] as ele, 
            (array_agg(access))[1] AS access,
            (array_agg(religion))[1] AS religion    
        FROM 
            (SELECT
                osm_id,
                name,
                class,
                subclass,
                ele,
                access,
                religion,
                ST_ClusterDBSCAN(geometry, 20, 1) OVER () AS cluster_id,
                geometry as geom
            FROM import.poi
            WHERE 17 <= !ZOOM! AND 18 > !ZOOM! AND (geometry && !BBOX!)
            ) cluster
        GROUP BY class, subclass, cluster_id
    UNION ALL
        SELECT
            osm_id as gid, ST_AsBinary(geometry) as geom, 1 as count, class, subclass, name, ele, access, religion
        FROM import.poi
        WHERE (18 <= !ZOOM!) AND (geometry && !BBOX!)    
    ORDER BY count DESC
    """

[[maps]]
name = "cluster"

    [[maps.layers]]
    provider_layer = "cluster.poi"
    min_zoom = 8

[[providers]]
name = "osm"            # provider name is referenced from map layers
type = "postgis"        # the type of data provider. currently only supports postgis
host = "postgis11"        # postgis database host
port = 5432             # postgis database port
database = "slice"      # postgis database name
user = "postgres"       # postgis database user
password = ""           # postgis database password
srid = 3857             # The default srid for this provider. If not provided it will be WebMercator (3857)

    [[providers.layers]]
    name = "roads"
    sql= """
    select osm_id as gid, ST_AsBinary(geometry) as geom, class, subclass, oneway, tracktype, bridge, tunnel, service, CASE WHEN layer IS NULL THEN 0 ELSE layer END as layer, rank, bicycle, scale, substring(ref from '\\w+') as ref_prefix, substring(ref from '\\d+') as ref_num, NULL as name from import.roads_gen8 WHERE 9 > !ZOOM! AND (geometry && !BBOX!) 
    UNION ALL
    select osm_id as gid, ST_AsBinary(geometry) as geom, class, subclass, oneway, tracktype, bridge, tunnel, service, CASE WHEN layer IS NULL THEN 0 ELSE layer END as layer, rank, bicycle, scale, substring(ref from '\\w+') as ref_prefix, substring(ref from '\\d+') as ref_num, NULL as name from import.roads_gen9 WHERE 9 <= !ZOOM! AND 10 > !ZOOM! AND (geometry && !BBOX!) 
    UNION ALL
    select osm_id as gid, ST_AsBinary(geometry) as geom, class, subclass, oneway, tracktype, bridge, tunnel, service, CASE WHEN layer IS NULL THEN 0 ELSE layer END as layer, rank, bicycle, scale, substring(ref from '\\w+') as ref_prefix, substring(ref from '\\d+') as ref_num, NULL as name from import.roads_gen10 WHERE 10 <= !ZOOM! AND 12 > !ZOOM! AND (geometry && !BBOX!) 
    UNION ALL
    select osm_id as gid, ST_AsBinary(geometry) as geom, class, subclass, oneway, tracktype, bridge, tunnel, service, CASE WHEN layer IS NULL THEN 0 ELSE layer END as layer, rank, bicycle, scale, substring(ref from '\\w+') as ref_prefix, substring(ref from '\\d+') as ref_num, NULL as name from import.roads_gen12 WHERE 12 <= !ZOOM! AND 13 > !ZOOM! AND (geometry && !BBOX!)
    UNION ALL
    select osm_id as gid, ST_AsBinary(geometry) as geom, class, subclass, oneway, tracktype, bridge, tunnel, service, CASE WHEN layer IS NULL THEN 0 ELSE layer END as layer, rank, bicycle, scale, substring(ref from '\\w+') as ref_prefix, substring(ref from '\\d+') as ref_num, NULL as name from import.roads_gen13 WHERE 13 <= !ZOOM! AND 14 > !ZOOM! AND (geometry && !BBOX!)
    UNION ALL
    select osm_id as gid, ST_AsBinary(geometry) as geom, class, subclass, oneway, tracktype, bridge, tunnel, service, CASE WHEN layer IS NULL THEN 0 ELSE layer END as layer, rank, bicycle, scale, substring(ref from '\\w+') as ref_prefix, substring(ref from '\\d+') as ref_num, NULL as name from import.roads_gen14 WHERE 14 <= !ZOOM! AND 15 > !ZOOM! AND (geometry && !BBOX!)
    UNION ALL
    select osm_id as gid, ST_AsBinary(geometry) as geom, class, subclass, oneway, tracktype, bridge, tunnel, service, CASE WHEN layer IS NULL THEN 0 ELSE layer END as layer, rank, bicycle, scale, substring(ref from '\\w+') as ref_prefix, substring(ref from '\\d+') as ref_num, NULL as name from import.roads_gen15 WHERE 15 <= !ZOOM! AND 16 > !ZOOM! AND (geometry && !BBOX!)
    UNION ALL
    select osm_id as gid, ST_AsBinary(geometry) as geom, class, subclass, oneway, tracktype, bridge, tunnel, service, CASE WHEN layer IS NULL THEN 0 ELSE layer END as layer, rank, bicycle, scale, substring(ref from '\\w+') as ref_prefix, substring(ref from '\\d+') as ref_num, name from import.roads WHERE 16 <= !ZOOM! AND (geometry && !BBOX!) 
    ORDER BY rank DESC
    """

    [[providers.layers]]
    name = "railway"
    sql= """
    select id as gid, ST_AsBinary(geometry) as geom, class, subclass, zorder, bridge, tunnel, service from import.railway WHERE subclass NOT IN('subway', 'tram') AND (attraction <> '') IS NOT TRUE AND (geometry && !BBOX!)
    """

    [[providers.layers]]
    name = "transportation"
    sql= """
    select id as gid, ST_AsBinary(geometry) as geom, class, subclass from import.transportation WHERE NOT ST_IsClosed(geometry) AND (geometry && !BBOX!) 
    """

    [[providers.layers]]
    name = "manmade"
    sql= """
    select osm_id as gid, ST_AsBinary(geometry) as geom, class, subclass, ST_Length(geometry)::integer as length, ST_IsClosed(geometry) as polygon from import.manmade_lines_gen13 WHERE 14 > !ZOOM! AND (geometry && !BBOX!) 
    UNION ALL
    select osm_id as gid, ST_AsBinary(geometry) as geom, class, subclass, ST_Length(geometry)::integer as length, ST_IsClosed(geometry) as polygon from import.manmade_lines WHERE 14 <= !ZOOM! AND (geometry && !BBOX!) 
    UNION ALL
    select osm_id as gid, ST_AsBinary(geometry) as geom, class, subclass, ST_Perimeter(geometry)::integer as length, TRUE as polygon from import.manmade_polygons WHERE (geometry && !BBOX!) 
    UNION ALL
    select osm_id as gid, ST_AsBinary(geometry) as geom, class, subclass, 0 as length, FALSE as polygon from import.manmade_points WHERE (geometry && !BBOX!) 
    """

    [[providers.layers]]
    name = "piste"
    sql= """
    select id as gid, ST_AsBinary(geometry) as geom, difficulty from import.piste WHERE NOT ST_IsClosed(geometry) and (geometry && !BBOX!) 
    """

    [[providers.layers]]
    name = "cycleroute"
    sql="""
    select row_number() over () as gid, ref, name, ST_AsBinary(ST_LineMerge(ST_Collect(geometry))) as geom from import.cycleroute where (geometry && !BBOX!) AND ST_GeometryType(geometry)='ST_LineString' group by ref, name order by ref desc NULLS last, name desc NULLS last
    -- select row_number() over () as gid, ST_AsBinary(ST_LineMerge(ST_Collect(geometry))) as geom from import.cycleroute where (geometry && !BBOX!) AND ST_GeometryType(geometry)='ST_LineString'    
    """

    [[providers.layers]]
    name = "buildings-large"
    sql= """
    select id as gid, ST_AsBinary(geometry) as geom from import.buildings WHERE (ST_Area(geometry)>10000) AND (geometry && !BBOX!) 
    """

    [[providers.layers]]
    name = "buildings"
    sql= """
    select id as gid, ST_AsBinary(geometry) as geom from import.buildings WHERE 15 > !ZOOM! AND (ST_Area(geometry)>80) AND (geometry && !BBOX!) 
    union all
    select id as gid, ST_AsBinary(geometry) as geom from import.buildings WHERE 15 <= !ZOOM! AND (geometry && !BBOX!) 
    """

    [[providers.layers]]
    name = "admin"
    tablename = "import.admin"
    geometry_fieldname = "geometry"
    id_fieldname = "id"
    fields = "ref, level"

    [[providers.layers]]
    name = "landuse"
    sql= """
    select osm_id as gid, ST_AsBinary(geometry) as geom, subclass from import.landuse_gen8 WHERE 9 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, subclass from import.landuse_gen9 WHERE 9 <= !ZOOM! AND 10 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, subclass from import.landuse_gen10 WHERE 10 <= !ZOOM! AND 11 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, subclass from import.landuse_gen11 WHERE 11 <= !ZOOM! AND 12 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, subclass from import.landuse_gen12 WHERE 12 <= !ZOOM! AND 13 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, subclass from import.landuse_gen13 WHERE 13 <= !ZOOM! AND 14 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, subclass from import.landuse_gen14 WHERE 14 <= !ZOOM! AND 15 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, subclass from import.landuse WHERE 15 <= !ZOOM! AND (geometry && !BBOX!) 
    """

    [[providers.layers]]
    name = "landcover"
    sql= """
    select osm_id as gid, ST_AsBinary(geometry) as geom, subclass, surface from import.landcover_gen8 WHERE 9 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, subclass, surface from import.landcover_gen9 WHERE 9 <= !ZOOM! AND 10 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, subclass, surface from import.landcover_gen10 WHERE 10 <= !ZOOM! AND 11 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, subclass, surface from import.landcover_gen11 WHERE 11 <= !ZOOM! AND 12 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, subclass, surface from import.landcover_gen12 WHERE 12 <= !ZOOM! AND 13 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, subclass, surface from import.landcover_gen13 WHERE 13 <= !ZOOM! AND 14 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, subclass, surface from import.landcover_gen14 WHERE 14 <= !ZOOM! AND 15 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, subclass, surface from import.landcover WHERE 15 <= !ZOOM! AND (geometry && !BBOX!) 
    """


    [[providers.layers]]
    name = "waterway"
    # tablename = "import.waterway"
    # geometry_fieldname = "geometry"
    # id_fieldname = "osm_id"
    # fields = "class, subclass, tunnel, layer"
    sql= """
    select osm_id as gid, ST_AsBinary(geometry) as geom, subclass, tunnel, layer from import.waterway_gen8 WHERE 10 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, subclass, tunnel, layer from import.waterway_gen10 WHERE 10 <= !ZOOM! AND 12 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, subclass, tunnel, layer from import.waterway_gen12 WHERE 12 <= !ZOOM! AND 14 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom, subclass, tunnel, layer from import.waterway WHERE 14 <= !ZOOM! AND (geometry && !BBOX!) 
    """


    [[providers.layers]]
    name = "waterarea"
    sql= """
    select osm_id as gid, ST_AsBinary(geometry) as geom from import.waterarea_gen8 WHERE 9 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom from import.waterarea_gen9 WHERE 9 <= !ZOOM! AND 10 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom from import.waterarea_gen10 WHERE 10 <= !ZOOM! AND 11 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom from import.waterarea_gen11 WHERE 11 <= !ZOOM! AND 12 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom from import.waterarea_gen12 WHERE 12 <= !ZOOM! AND 13 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom from import.waterarea_gen13 WHERE 13 <= !ZOOM! AND 14 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom from import.waterarea_gen14 WHERE 14 <= !ZOOM! AND 15 > !ZOOM! AND (geometry && !BBOX!) 
    union all
    select osm_id as gid, ST_AsBinary(geometry) as geom from import.waterarea WHERE 15 <= !ZOOM! AND (geometry && !BBOX!) 
    """

    [[providers.layers]]
    name = "housenumbers"
    sql= """
    select osm_id as gid, ST_AsBinary(geometry) as geom, number, name from import.housenumbers WHERE geometry && !BBOX!
    """

    [[providers.layers]]
    name = "label"
    # It is expected that identical names within a tile describe the same feature. => DISTINCT-Statement prevents duplicates for point, area
    # Sorting by `pop` priorizes labels for larger settlements
    sql= """
    select DISTINCT ON(pop, name) row_number() over (ORDER by pop desc NULLS LAST) as gid, ST_AsBinary(geometry) as geom, class, subclass, name, ele, pop from import.label WHERE (geometry && !BBOX!) ORDER BY pop DESC NULLS LAST, name
    """


[[maps]]
name = "local"
tile_buffer = 256

    [[maps.layers]]
    provider_layer = "osm.roads"
    min_zoom = 8

    [[maps.layers]]
    provider_layer = "osm.railway"
    min_zoom = 9

    [[maps.layers]]
    provider_layer = "osm.transportation"
    min_zoom = 10

    [[maps.layers]]
    provider_layer = "osm.manmade"
    min_zoom = 10

    [[maps.layers]]
    provider_layer = "osm.piste"
    min_zoom = 14

    [[maps.layers]]
    provider_layer = "osm.landuse"
    min_zoom = 7

    [[maps.layers]]
    provider_layer = "osm.landcover"
    min_zoom = 7

    [[maps.layers]]
    provider_layer = "osm.cycleroute"
    min_zoom = 11

    [[maps.layers]]
    provider_layer = "osm.buildings-large"
    min_zoom = 13
    max_zoom = 15

    [[maps.layers]]
    provider_layer = "osm.buildings"
    min_zoom = 14

    # [[maps.layers]]
    # provider_layer = "osm.admin"
    # min_zoom = 6

    [[maps.layers]]
    provider_layer = "osm.waterway"
    min_zoom = 7

    [[maps.layers]]
    provider_layer = "osm.waterarea"
    min_zoom = 7

    [[maps.layers]]
    provider_layer = "osm.housenumbers"
    min_zoom = 18

    [[maps.layers]]
    provider_layer = "osm.label"
    min_zoom = 7
